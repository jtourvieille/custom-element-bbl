<RadzenCheckBoxList
    Data="@data"
    Value=@Values
    Change="OnChange"
    TValue="int"
    TextProperty="Name"
    ValueProperty="Id" 
    AllowSelectAll="true"
    SelectAllText="Select all items"
    Orientation="Orientation.Vertical"
>
    
</RadzenCheckBoxList>

<RadzenTextBox @bind-Value="inputText" />

<RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" Click="AddClicked" />
<RadzenButton Icon="highlight_off" ButtonStyle="ButtonStyle.Primary" Click="RemoveClicked" />

@code {
    [Parameter]
    public IEnumerable<int> Values { get; set; } = new[] { 1 };

    [Parameter]
    public EventCallback<IEnumerable<int>> SelectedValuesChanged { get; set; }

    [Parameter]
    public EventCallback<IEnumerable<BlazorTodoItem>> ValuesChanged { get; set; }

    private string inputText;

    public class BlazorTodoItem
    {
        public int Id { get; set; }
        public string Name { get; set; }

        public override string ToString()
        {
            return $"{Id} - {Name}";
        }
    }

    List<BlazorTodoItem> data = new();

    private async Task AddClicked()
    {
        data.Add(new BlazorTodoItem
        {
                Id = data.Count > 0 ? data.Max(i => i.Id) + 1 : 1,
                Name = inputText
        });

        if (ValuesChanged.HasDelegate)
        {
            await ValuesChanged.InvokeAsync(data);
        }

        inputText = string.Empty;
    }

    private async Task RemoveClicked()
    {
        if (Values != null && Values.Any())
        {
            data.RemoveAll(item => Values.Contains(item.Id));

            if (ValuesChanged.HasDelegate)
            {
                await ValuesChanged.InvokeAsync(data);
            }
        }
    }

    private async Task OnChange(IEnumerable<int> obj)
    {
        Values = obj;
        if (SelectedValuesChanged.HasDelegate)
        {
            await SelectedValuesChanged.InvokeAsync(Values);
        }
    }
}
